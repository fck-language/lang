use paste::paste;

/// Zero value trait
///
/// Provides a constant reference to a zero value used for implementing [`Index`](std::ops::Index)
/// for various compression structs
pub trait Zero
where
    Self: 'static,
{
    /// Zero value constant reference
    const ZERO: &'static Self;
}

/// Implement [`Zero`] for given types. Creates a private reference constant that is then used
/// inside the trait implementation.
///
/// For example, the macro expansion for `i8` would be
/// ```rust, ignore
/// #[allow(non_upper_case_globals)]
/// const zero_i8: &i8 = &0;
/// impl Zero for i8 {
/// 	const ZERO: &'static Self = zero_i8;
/// }
/// ```
macro_rules! impl_zero {
    ($($t:tt),*$(,)?) => {$(
		paste!{
			/// Autogenerated constant to be used by a [`Zero`] impl
			#[allow(non_upper_case_globals)]
			const [<zero_ $t>]: &$t = &0;
			impl Zero for $t {
				const ZERO: &'static $t = [<zero_ $t>];
			}
		}
	)*};
}

impl_zero!(u8, u16, u32, usize, i8, i16, i32, isize);
