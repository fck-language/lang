#![feature(prelude_import)]
//! # Language crate for fck
//!
//! This provides some pre-deserialized languages and DFA maps, as well as all the required structs
//! and functions to do language parsing and lexing
#![warn(rustdoc::broken_intra_doc_links, missing_docs)]
#![allow(rustdoc::private_intra_doc_links)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
mod lexer {
    use crate::{
        tok::{Position, RunningPosition, Token, TokType},
        LanguageTuple,
    };
    use lang_inner::{LanguageRaw, Table};
    use std::fmt::{Debug, Formatter};
    use std::ops::{Deref, Index};
    use std::slice::Iter;
    /// # Tokenize an input
    ///
    /// Turn an input into
    pub fn tokenize<'a, B>(
        mut bytes: B,
        l: &LanguageRaw<'a>,
        buf: &Vec<LanguageTuple<'a>>,
        (transition, tt, td): (&dyn Table<u16>, &dyn Table<u8>, &dyn Table<u8>),
    ) -> Result<Vec<Token>, u16>
    where
        B: Iterator<Item = u8>,
    {
        let mut out = Vec::new();
        let mut bytes = bytes.peekable();
        let mut pos = RunningPosition::new();
        let mut tree = NFABranch::new(Vec::new(), pos.clone());
        let mut language_scopes = ::alloc::vec::Vec::new();
        let mut current_lang = (l, (transition, tt, td));
        while let Some(b) = bytes.next() {
            match b {
                33 => {
                    match bytes.next() {
                        Some(t) => {
                            match t {
                                33 => {
                                    let mut lang_bytes = Vec::new();
                                    while let Some(b) = bytes.next() {
                                        if b == 10 || b == 59 {
                                            break;
                                        }
                                        lang_bytes.push(b)
                                    }
                                    pos.advance(10);
                                    if let Ok(lang_string) = String::from_utf8(lang_bytes) {
                                        if let Some(ltr) = crate::get(&*lang_string, buf) {
                                            current_lang = ltr;
                                        } else {
                                            {
                                                ::std::io::_print(format_args!("{0:?}\n", out));
                                            };
                                            return Err(1);
                                        }
                                    }
                                    tree.ps = pos.finish();
                                }
                                9 | 10 | 32 => {
                                    out.push(Token {
                                        ps: pos.finish(),
                                        pe: pos.finish(),
                                        tt: TokType::Not,
                                    });
                                    pos.advance(t);
                                }
                                _ => {
                                    match tree
                                        .propagate(
                                            33,
                                            current_lang.0,
                                            current_lang.1.0,
                                            current_lang.1.1,
                                            current_lang.1.2,
                                        )
                                    {
                                        NFAPropRes::Continue => {}
                                        NFAPropRes::End => {
                                            out.extend(tree.preceding.clone());
                                            tree.reset(&pos)
                                        }
                                        NFAPropRes::Error => {
                                            if let Some(branch) = &tree.branch {
                                                tree = *branch.clone()
                                            } else {
                                                return Err(0);
                                            }
                                        }
                                    };
                                    pos.advance(33);
                                    match tree
                                        .propagate(
                                            t,
                                            current_lang.0,
                                            current_lang.1.0,
                                            current_lang.1.1,
                                            current_lang.1.2,
                                        )
                                    {
                                        NFAPropRes::Continue => {}
                                        NFAPropRes::End => {
                                            out.extend(tree.preceding.clone());
                                            tree.reset(&pos)
                                        }
                                        NFAPropRes::Error => {
                                            if let Some(branch) = &tree.branch {
                                                tree = *branch.clone()
                                            } else {
                                                return Err(0);
                                            }
                                        }
                                    };
                                    pos.advance(t);
                                }
                            }
                        }
                        None => break,
                    }
                }
                123 => {
                    language_scopes.push(current_lang.clone());
                    out.push(Token {
                        ps: pos.finish(),
                        pe: pos.finish(),
                        tt: TokType::LParenCurly,
                    });
                    pos.advance(133);
                    tree.ps = pos.finish();
                    continue;
                }
                125 => {
                    if let Some(l) = language_scopes.pop() {
                        current_lang = l
                    } else {
                        return Err(2)
                    }
                    out.push(Token {
                        ps: pos.finish(),
                        pe: pos.finish(),
                        tt: TokType::RParenCurly,
                    });
                    pos.advance(135);
                    tree.ps = pos.finish();
                    continue;
                }
                9 | 10 | 32 => {
                    pos.advance(b);
                    tree.pos.advance(b);
                    continue;
                }
                _ => {
                    match tree
                        .propagate(
                            b,
                            current_lang.0,
                            current_lang.1.0,
                            current_lang.1.1,
                            current_lang.1.2,
                        )
                    {
                        NFAPropRes::Continue => {}
                        NFAPropRes::End => {
                            out.extend(tree.preceding.clone());
                            tree.reset(&pos)
                        }
                        NFAPropRes::Error => {
                            if let Some(branch) = &tree.branch {
                                tree = *branch.clone()
                            } else {
                                return Err(0);
                            }
                        }
                    };
                    pos.advance(b);
                }
            }
            while let Some(t) = bytes.next() {
                if t == 32 || t == 9 || t == 10 {
                    match tree.end() {
                        Ok(rem) => {
                            out.extend(rem);
                        }
                        Err(_) => return Err(1),
                    }
                    pos.advance(t);
                    tree.reset(&pos);
                    continue;
                }
                match tree
                    .propagate(
                        t,
                        current_lang.0,
                        current_lang.1.0,
                        current_lang.1.1,
                        current_lang.1.2,
                    )
                {
                    NFAPropRes::Continue => {}
                    NFAPropRes::End => {
                        out.extend(tree.preceding.clone());
                        tree.preceding.clear();
                        tree.branch = None;
                        tree.matched.clear();
                        pos.advance(t);
                        tree.pos = pos.clone();
                        tree.ps = pos.finish();
                        break;
                    }
                    NFAPropRes::Error => {
                        if let Some(branch) = &tree.branch {
                            tree = *branch.clone()
                        } else {
                            {
                                ::std::io::_print(format_args!("{0:?}\n", out));
                            };
                            return Err(3);
                        }
                    }
                }
                pos.advance(t);
            }
        }
        match tree.end() {
            Ok(rem) => {
                out.extend(rem);
                Ok(out)
            }
            Err(_) => Err(4),
        }
    }
    struct NFABranch {
        row: u16,
        pos: RunningPosition,
        ps: Position,
        matched: Vec<u8>,
        preceding: Vec<Token>,
        branch: Option<Box<Self>>,
    }
    #[automatically_derived]
    impl ::core::clone::Clone for NFABranch {
        #[inline]
        fn clone(&self) -> NFABranch {
            NFABranch {
                row: ::core::clone::Clone::clone(&self.row),
                pos: ::core::clone::Clone::clone(&self.pos),
                ps: ::core::clone::Clone::clone(&self.ps),
                matched: ::core::clone::Clone::clone(&self.matched),
                preceding: ::core::clone::Clone::clone(&self.preceding),
                branch: ::core::clone::Clone::clone(&self.branch),
            }
        }
    }
    #[cfg(any(test, debug_assertions))]
    impl Debug for NFABranch {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            let mut w = f.width().unwrap_or(0);
            f.write_fmt(
                format_args!(
                    "{0}row: {1} | ps: {2:?} | matched: {3:?} | preceding: {4:?}", " "
                    .repeat(w), self.row, self.ps, self.matched, self.preceding
                ),
            )?;
            w += 2;
            if let Some(branch) = &self.branch {
                f.write_fmt(format_args!("\n{0:1$?}", branch, w))
            } else {
                Ok(())
            }
        }
    }
    /// NFA parsing result
    ///
    /// |  | Reached accepting state | Has not |
    /// |---|---|---|
    /// | Has a next state | [`Continue`](Self::Continue) | [`Continue`](Self::Continue) |
    /// | Does not | [`End`](Self::End) | [`Error`](Self::Error) |
    enum NFAPropRes {
        /// Node has a next state to go to. Used if the node has branched or not
        Continue,
        /// Node has reached a terminating state and has no next state to go to
        End,
        /// Node has not reached a terminating state and has no next state to go to
        Error,
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for NFAPropRes {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::write_str(
                f,
                match self {
                    NFAPropRes::Continue => "Continue",
                    NFAPropRes::End => "End",
                    NFAPropRes::Error => "Error",
                },
            )
        }
    }
    impl NFABranch {
        pub fn new(preceding: Vec<Token>, pos: RunningPosition) -> Self {
            let ps = pos.finish();
            Self {
                preceding,
                pos,
                ps,
                row: 0,
                matched: Vec::new(),
                branch: None,
            }
        }
        fn new_branch(&mut self, new: Token) {
            let mut preceding = self.preceding.clone();
            preceding.push(new);
            self.branch = Some(Box::new(NFABranch::new(preceding, self.pos.clone())));
        }
        pub fn reset(&mut self, p: &RunningPosition) {
            self.preceding.clear();
            self.branch = None;
            self.row = 0;
            self.matched.clear();
            self.ps = p.finish();
            self.pos = p.clone();
        }
        pub fn propagate(
            &mut self,
            b: u8,
            l: &LanguageRaw<'_>,
            transition: &dyn Table<u16>,
            tt: &dyn Table<u8>,
            td: &dyn Table<u8>,
        ) -> NFAPropRes {
            self.pos.advance(b);
            if let Some(ref mut branch) = self.branch {
                match branch.propagate(b, l, transition, tt, td) {
                    NFAPropRes::Continue => {}
                    NFAPropRes::End | NFAPropRes::Error => {
                        self.branch = branch.branch.clone();
                    }
                }
            }
            self.matched.push(b);
            let last_row = self.row;
            self.row = transition.element(self.row, b);
            let tt_val = tt.element(last_row, b);
            if self.row == 0 {
                if tt_val == 0 {
                    NFAPropRes::Error
                } else {
                    self.preceding
                        .push(
                            Token::new(
                                self.ps.clone(),
                                self.pos.finish(),
                                tt_val,
                                td.element(last_row, b),
                                self.matched.clone(),
                                l,
                            ),
                        );
                    NFAPropRes::End
                }
            } else {
                if tt_val != 0 {
                    self.new_branch(
                        Token::new(
                            self.ps.clone(),
                            self.pos.finish(),
                            tt_val,
                            td.element(last_row, b),
                            self.matched.clone(),
                            l,
                        ),
                    )
                }
                NFAPropRes::Continue
            }
        }
        pub fn end(&self) -> Result<Vec<Token>, ()> {
            if self.row == 0 {
                Ok(self.preceding.clone())
            } else {
                if let Some(branch) = &self.branch { branch.end() } else { Err(()) }
            }
        }
    }
}
use lang_inner::compress::UStream;
use lang_inner::{LanguageRaw, Table};
pub use lexer::tokenize;
use std::collections::HashMap;
use std::path::{Path, PathBuf};
pub mod tok {
    //! # Tokens
    use std::fmt::{Debug, Formatter};
    use lang_inner::{Digits, LanguageRaw};
    /// # Intermediary position struct
    ///
    /// Used to hold required positional data when lexing, and can be transformed into a [`Position`]
    /// with the [`finish`](Self::finish) method
    pub struct RunningPosition {
        ln: usize,
        col: usize,
        previous: u8,
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for RunningPosition {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(
                f,
                "RunningPosition",
                "ln",
                &self.ln,
                "col",
                &self.col,
                "previous",
                &&self.previous,
            )
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for RunningPosition {
        #[inline]
        fn clone(&self) -> RunningPosition {
            RunningPosition {
                ln: ::core::clone::Clone::clone(&self.ln),
                col: ::core::clone::Clone::clone(&self.col),
                previous: ::core::clone::Clone::clone(&self.previous),
            }
        }
    }
    /// # Position data
    ///
    /// Holds positional data on tokens and AST nodes
    pub struct Position {
        ln: usize,
        col: usize,
    }
    #[automatically_derived]
    impl ::core::clone::Clone for Position {
        #[inline]
        fn clone(&self) -> Position {
            Position {
                ln: ::core::clone::Clone::clone(&self.ln),
                col: ::core::clone::Clone::clone(&self.col),
            }
        }
    }
    #[cfg(any(test, debug_assertions))]
    impl std::fmt::Debug for Position {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            f.write_fmt(format_args!("({0}, {1})", self.ln, self.col))
        }
    }
    impl RunningPosition {
        /// Make a new instance of `Self`. Sets the [line](Self::ln), [column](Self::col), and
        /// [previous byte](Self::previous) to 0
        pub fn new() -> Self {
            Self { ln: 0, col: 0, previous: 0 }
        }
        /// Advance the position on a given byte
        pub fn advance(&mut self, b: u8) {
            if b == b'\n' {
                self.ln += 1;
                self.col = 0;
            } else {
                self.col += 1
            }
            if b == b'\r' && self.previous == b'\n' {
                self.col -= 1;
            }
            self.previous = b;
        }
        /// Make a new [`Position`] instance from `Self`
        pub fn finish(&self) -> Position {
            Position {
                ln: self.ln,
                col: self.col,
            }
        }
    }
    /// # Token
    ///
    /// Holds a starting end ending [`Position`] as well as a [token type](TokType)
    pub struct Token {
        /// Starting position
        pub ps: Position,
        /// Ending position
        pub pe: Position,
        /// Token type
        pub tt: TokType,
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for Token {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(
                f,
                "Token",
                "ps",
                &self.ps,
                "pe",
                &self.pe,
                "tt",
                &&self.tt,
            )
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for Token {
        #[inline]
        fn clone(&self) -> Token {
            Token {
                ps: ::core::clone::Clone::clone(&self.ps),
                pe: ::core::clone::Clone::clone(&self.pe),
                tt: ::core::clone::Clone::clone(&self.tt),
            }
        }
    }
    impl PartialEq for Token {
        fn eq(&self, other: &Self) -> bool {
            self.tt == other.tt
        }
    }
    impl PartialEq<TokType> for Token {
        fn eq(&self, other: &TokType) -> bool {
            self.tt == *other
        }
    }
    /// # Token types
    #[warn(missing_docs)]
    pub enum TokType {
        /// Integer literal
        /// - `tt=0`
        /// - See the `digits` module of [tables](lang_inner::tables) for `td` values
        Int(DynInt),
        /// Float literal
        /// - `tt=1`
        /// - `td` is todo
        Float(f64),
        /// Boolean literal
        /// - `tt=2`
        /// - `td=0` for `false` and `td=1` for `true`
        Bool(bool),
        /// String literal
        /// - `tt=3`
        String(Vec<u8>),
        /// Operator such as `+` or `**`
        /// - `tt=4`
        /// - `td=0..=8` (See [`Op::new`] for specific `td` values)
        Op(Op),
        /// Comparison such as `==` or `!=`
        /// - `tt=4`
        /// - `td=0..=5` (See [`Cmp::new`] for specific `td` values)
        Cmp(Cmp),
        /// Increment
        /// - `tt=4`
        /// - `td=6`
        Increment,
        /// Decrement
        /// - `tt=4`
        /// - `td=7`
        Decrement,
        /// Left parentheses (
        /// - `tt=5`
        /// - `td=0`
        LParen,
        /// Right parentheses )
        /// - `tt=5`
        /// - `td=1`
        RParen,
        /// Left curly parentheses {
        /// - `tt=5`
        /// - `td=2`
        LParenCurly,
        /// Right curly parentheses }
        /// - `tt=5`
        /// - `td=3`
        RParenCurly,
        /// Left square parentheses [
        /// - `tt=5`
        /// - `td=4`
        LParenSquare,
        /// Right square parentheses ]
        /// - `tt=5`
        /// - `td=5`
        RParenSquare,
        /// At identifier
        /// TODO
        Label(String, String),
        /// Boolean negation
        /// - `tt=4`
        /// - `td=8`
        Not,
        /// Colon
        /// - `tt=4`
        /// - `td=9`
        Colon,
        /// Identifier. Holds identifier string and language key
        /// - `td=10`
        Identifier(String, String),
        /// Keyword
        /// - `td=8`
        Keyword(u8),
        /// Type
        /// - `td=9`
        Type(String, String),
        /// Question mark
        /// - `tt=4`
        /// - `td=10`
        QuestionMark,
        /// Dot
        /// - `tt=4`
        /// - `td=11`
        Dot,
        /// Set/modifier set operator such as `+=` or `=`
        /// - `tt=7`
        /// - `td=0` for `None` and `td=1..6` for `Some(Op)`
        ///   See [`Op::new_self`] for specific `td` values (note the used `td` value here is one more
        ///   than used for `Op::new_self`)
        Set(Option<Op>),
        /// Comment token. Used exclusively by the translator to return comments
        /// - `tt=254`
        Comment(String, String),
    }
    #[automatically_derived]
    #[warn(missing_docs)]
    impl ::core::fmt::Debug for TokType {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match self {
                TokType::Int(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "Int",
                        &__self_0,
                    )
                }
                TokType::Float(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "Float",
                        &__self_0,
                    )
                }
                TokType::Bool(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "Bool",
                        &__self_0,
                    )
                }
                TokType::String(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "String",
                        &__self_0,
                    )
                }
                TokType::Op(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(f, "Op", &__self_0)
                }
                TokType::Cmp(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "Cmp",
                        &__self_0,
                    )
                }
                TokType::Increment => ::core::fmt::Formatter::write_str(f, "Increment"),
                TokType::Decrement => ::core::fmt::Formatter::write_str(f, "Decrement"),
                TokType::LParen => ::core::fmt::Formatter::write_str(f, "LParen"),
                TokType::RParen => ::core::fmt::Formatter::write_str(f, "RParen"),
                TokType::LParenCurly => {
                    ::core::fmt::Formatter::write_str(f, "LParenCurly")
                }
                TokType::RParenCurly => {
                    ::core::fmt::Formatter::write_str(f, "RParenCurly")
                }
                TokType::LParenSquare => {
                    ::core::fmt::Formatter::write_str(f, "LParenSquare")
                }
                TokType::RParenSquare => {
                    ::core::fmt::Formatter::write_str(f, "RParenSquare")
                }
                TokType::Label(__self_0, __self_1) => {
                    ::core::fmt::Formatter::debug_tuple_field2_finish(
                        f,
                        "Label",
                        __self_0,
                        &__self_1,
                    )
                }
                TokType::Not => ::core::fmt::Formatter::write_str(f, "Not"),
                TokType::Colon => ::core::fmt::Formatter::write_str(f, "Colon"),
                TokType::Identifier(__self_0, __self_1) => {
                    ::core::fmt::Formatter::debug_tuple_field2_finish(
                        f,
                        "Identifier",
                        __self_0,
                        &__self_1,
                    )
                }
                TokType::Keyword(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "Keyword",
                        &__self_0,
                    )
                }
                TokType::Type(__self_0, __self_1) => {
                    ::core::fmt::Formatter::debug_tuple_field2_finish(
                        f,
                        "Type",
                        __self_0,
                        &__self_1,
                    )
                }
                TokType::QuestionMark => {
                    ::core::fmt::Formatter::write_str(f, "QuestionMark")
                }
                TokType::Dot => ::core::fmt::Formatter::write_str(f, "Dot"),
                TokType::Set(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "Set",
                        &__self_0,
                    )
                }
                TokType::Comment(__self_0, __self_1) => {
                    ::core::fmt::Formatter::debug_tuple_field2_finish(
                        f,
                        "Comment",
                        __self_0,
                        &__self_1,
                    )
                }
            }
        }
    }
    #[warn(missing_docs)]
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for TokType {}
    #[automatically_derived]
    #[warn(missing_docs)]
    impl ::core::cmp::PartialEq for TokType {
        #[inline]
        fn eq(&self, other: &TokType) -> bool {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            let __arg1_tag = ::core::intrinsics::discriminant_value(other);
            __self_tag == __arg1_tag
                && match (self, other) {
                    (TokType::Int(__self_0), TokType::Int(__arg1_0)) => {
                        *__self_0 == *__arg1_0
                    }
                    (TokType::Float(__self_0), TokType::Float(__arg1_0)) => {
                        *__self_0 == *__arg1_0
                    }
                    (TokType::Bool(__self_0), TokType::Bool(__arg1_0)) => {
                        *__self_0 == *__arg1_0
                    }
                    (TokType::String(__self_0), TokType::String(__arg1_0)) => {
                        *__self_0 == *__arg1_0
                    }
                    (TokType::Op(__self_0), TokType::Op(__arg1_0)) => {
                        *__self_0 == *__arg1_0
                    }
                    (TokType::Cmp(__self_0), TokType::Cmp(__arg1_0)) => {
                        *__self_0 == *__arg1_0
                    }
                    (
                        TokType::Label(__self_0, __self_1),
                        TokType::Label(__arg1_0, __arg1_1),
                    ) => *__self_0 == *__arg1_0 && *__self_1 == *__arg1_1,
                    (
                        TokType::Identifier(__self_0, __self_1),
                        TokType::Identifier(__arg1_0, __arg1_1),
                    ) => *__self_0 == *__arg1_0 && *__self_1 == *__arg1_1,
                    (TokType::Keyword(__self_0), TokType::Keyword(__arg1_0)) => {
                        *__self_0 == *__arg1_0
                    }
                    (
                        TokType::Type(__self_0, __self_1),
                        TokType::Type(__arg1_0, __arg1_1),
                    ) => *__self_0 == *__arg1_0 && *__self_1 == *__arg1_1,
                    (TokType::Set(__self_0), TokType::Set(__arg1_0)) => {
                        *__self_0 == *__arg1_0
                    }
                    (
                        TokType::Comment(__self_0, __self_1),
                        TokType::Comment(__arg1_0, __arg1_1),
                    ) => *__self_0 == *__arg1_0 && *__self_1 == *__arg1_1,
                    _ => true,
                }
        }
    }
    #[automatically_derived]
    #[warn(missing_docs)]
    impl ::core::clone::Clone for TokType {
        #[inline]
        fn clone(&self) -> TokType {
            match self {
                TokType::Int(__self_0) => {
                    TokType::Int(::core::clone::Clone::clone(__self_0))
                }
                TokType::Float(__self_0) => {
                    TokType::Float(::core::clone::Clone::clone(__self_0))
                }
                TokType::Bool(__self_0) => {
                    TokType::Bool(::core::clone::Clone::clone(__self_0))
                }
                TokType::String(__self_0) => {
                    TokType::String(::core::clone::Clone::clone(__self_0))
                }
                TokType::Op(__self_0) => {
                    TokType::Op(::core::clone::Clone::clone(__self_0))
                }
                TokType::Cmp(__self_0) => {
                    TokType::Cmp(::core::clone::Clone::clone(__self_0))
                }
                TokType::Increment => TokType::Increment,
                TokType::Decrement => TokType::Decrement,
                TokType::LParen => TokType::LParen,
                TokType::RParen => TokType::RParen,
                TokType::LParenCurly => TokType::LParenCurly,
                TokType::RParenCurly => TokType::RParenCurly,
                TokType::LParenSquare => TokType::LParenSquare,
                TokType::RParenSquare => TokType::RParenSquare,
                TokType::Label(__self_0, __self_1) => {
                    TokType::Label(
                        ::core::clone::Clone::clone(__self_0),
                        ::core::clone::Clone::clone(__self_1),
                    )
                }
                TokType::Not => TokType::Not,
                TokType::Colon => TokType::Colon,
                TokType::Identifier(__self_0, __self_1) => {
                    TokType::Identifier(
                        ::core::clone::Clone::clone(__self_0),
                        ::core::clone::Clone::clone(__self_1),
                    )
                }
                TokType::Keyword(__self_0) => {
                    TokType::Keyword(::core::clone::Clone::clone(__self_0))
                }
                TokType::Type(__self_0, __self_1) => {
                    TokType::Type(
                        ::core::clone::Clone::clone(__self_0),
                        ::core::clone::Clone::clone(__self_1),
                    )
                }
                TokType::QuestionMark => TokType::QuestionMark,
                TokType::Dot => TokType::Dot,
                TokType::Set(__self_0) => {
                    TokType::Set(::core::clone::Clone::clone(__self_0))
                }
                TokType::Comment(__self_0, __self_1) => {
                    TokType::Comment(
                        ::core::clone::Clone::clone(__self_0),
                        ::core::clone::Clone::clone(__self_1),
                    )
                }
            }
        }
    }
    /// # Operator token type
    ///
    /// An operator that can be used with an assignment. For example, this includes [`+`](Self::Plus)
    /// since we can have `+` and `+=`, but does not include [`++`](TokType::Increment) because we cannot
    /// have `++=`
    pub enum Op {
        /// Plus operator
        Plus,
        /// Minus operator
        Minus,
        /// Modulus operator
        Mod,
        /// Multiply operator
        Mult,
        /// Divide operator
        Div,
        /// Power operator
        Pow,
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for Op {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::write_str(
                f,
                match self {
                    Op::Plus => "Plus",
                    Op::Minus => "Minus",
                    Op::Mod => "Mod",
                    Op::Mult => "Mult",
                    Op::Div => "Div",
                    Op::Pow => "Pow",
                },
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Op {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Op {
        #[inline]
        fn eq(&self, other: &Op) -> bool {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            let __arg1_tag = ::core::intrinsics::discriminant_value(other);
            __self_tag == __arg1_tag
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for Op {
        #[inline]
        fn clone(&self) -> Op {
            match self {
                Op::Plus => Op::Plus,
                Op::Minus => Op::Minus,
                Op::Mod => Op::Mod,
                Op::Mult => Op::Mult,
                Op::Div => Op::Div,
                Op::Pow => Op::Pow,
            }
        }
    }
    /// # Comparison token type
    ///
    /// Comparison operations such as [`==`](Self::Eq) or [`<`](Self::LT)
    pub enum Cmp {
        /// Equals operator
        Eq,
        /// Not equals operator
        NE,
        /// Less than operator
        LT,
        /// Greater than operator
        GT,
        /// Less than or equals operator
        LTE,
        /// Greater than or equals operator
        GTE,
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for Cmp {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::write_str(
                f,
                match self {
                    Cmp::Eq => "Eq",
                    Cmp::NE => "NE",
                    Cmp::LT => "LT",
                    Cmp::GT => "GT",
                    Cmp::LTE => "LTE",
                    Cmp::GTE => "GTE",
                },
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Cmp {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Cmp {
        #[inline]
        fn eq(&self, other: &Cmp) -> bool {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            let __arg1_tag = ::core::intrinsics::discriminant_value(other);
            __self_tag == __arg1_tag
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for Cmp {
        #[inline]
        fn clone(&self) -> Cmp {
            match self {
                Cmp::Eq => Cmp::Eq,
                Cmp::NE => Cmp::NE,
                Cmp::LT => Cmp::LT,
                Cmp::GT => Cmp::GT,
                Cmp::LTE => Cmp::LTE,
                Cmp::GTE => Cmp::GTE,
            }
        }
    }
    /// Dynamically sized integer
    pub struct DynInt(Vec<u64>);
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for DynInt {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for DynInt {
        #[inline]
        fn eq(&self, other: &DynInt) -> bool {
            self.0 == other.0
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for DynInt {
        #[inline]
        fn clone(&self) -> DynInt {
            DynInt(::core::clone::Clone::clone(&self.0))
        }
    }
    impl From<u64> for DynInt {
        fn from(value: u64) -> Self {
            Self(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([value])))
        }
    }
    impl Debug for DynInt {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            f.write_fmt(
                format_args!(
                    "{0}", self.0.iter().rev().map(| v | { let res =
                    ::alloc::fmt::format(format_args!("{0}", v)); res }).collect::< Vec <
                    _ >> ().join("_")
                ),
            )
        }
    }
    impl DynInt {
        pub fn new(matched: Vec<u8>, base: u8, d: &Digits) -> Self {
            let mut out = Self(
                <[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([0])),
            );
            let separated = d.separate(base as usize, matched);
            match base {
                2 => {
                    for k in separated {
                        let mut carry = k;
                        let mask = (1 << 63) - 1;
                        for i in out.0.iter_mut().rev() {
                            if *i >> 63 != 0 {
                                let new_carry = (*i >> 63) as u8;
                                *i = carry as u64 + ((*i & mask) << 1);
                                carry = new_carry;
                            } else {
                                *i = (*i << 1) + carry as u64;
                                carry = 0;
                            }
                        }
                        if carry != 0 {
                            out.0.push(carry as u64);
                        }
                    }
                }
                8 => {
                    for k in separated {
                        let mut carry = k;
                        let mask = (1 << 61) - 1;
                        for i in out.0.iter_mut().rev() {
                            if *i >> 61 != 0 {
                                let new_carry = (*i >> 61) as u8;
                                *i = carry as u64 + ((*i & mask) << 3);
                                carry = new_carry;
                            } else {
                                *i = (*i << 3) + carry as u64;
                                carry = 0;
                            }
                        }
                        if carry != 0 {
                            out.0.push(carry as u64);
                        }
                    }
                }
                10 => {
                    for k in separated {
                        let mut carry = k;
                        for i in out.0.iter_mut() {
                            if i.overflowing_mul(10).1 {
                                let end = 10u64.pow(i.ilog10());
                                let new_carry = *i / end;
                                *i = (*i - new_carry * end) * 10 + carry as u64;
                                carry = new_carry as u8;
                            } else {
                                *i = *i * 10 + carry as u64;
                                carry = 0;
                            }
                        }
                        if carry != 0 {
                            out.0.push(carry as u64);
                        }
                    }
                }
                16 => {
                    for k in separated {
                        let mut carry = k;
                        let mask = (1 << 60) - 1;
                        for i in out.0.iter_mut().rev() {
                            if *i >> 60 != 0 {
                                let new_carry = (*i >> 60) as u8;
                                *i = carry as u64 + ((*i & mask) << 4);
                                carry = new_carry;
                            } else {
                                *i = (*i << 4) + carry as u64;
                                carry = 0;
                            }
                        }
                        if carry != 0 {
                            out.0.push(carry as u64);
                        }
                    }
                }
                _ => ::core::panicking::panic("internal error: entered unreachable code"),
            }
            out
        }
    }
    impl TokType {
        fn new(tt: u8, td: u8, matcher: Vec<u8>, l: &LanguageRaw<'_>) -> Self {
            match tt {
                1 => {
                    match td {
                        0 => TokType::Bool(true),
                        1 => TokType::Bool(false),
                        2 => TokType::Int(DynInt::new(matcher, 10, &l.keywords.digits)),
                        3 | 4 | 5 => {
                            let prefixes = match l.keywords.digits {
                                Digits::Short { u8arrays, .. } => {
                                    u8arrays[..4]
                                        .iter()
                                        .map(|(_, t)| 4 - *t as usize)
                                        .collect::<Vec<_>>()
                                }
                                Digits::Long { u8arrays, .. } => {
                                    u8arrays[..4]
                                        .iter()
                                        .map(|(_, t)| 4 - *t as usize)
                                        .collect::<Vec<_>>()
                                }
                            };
                            match td {
                                3 => {
                                    TokType::Int(
                                        DynInt::new(
                                            matcher[prefixes[3] + prefixes[0]..].to_vec(),
                                            2,
                                            &l.keywords.digits,
                                        ),
                                    )
                                }
                                4 => {
                                    TokType::Int(
                                        DynInt::new(
                                            matcher[prefixes[3] + prefixes[1]..].to_vec(),
                                            16,
                                            &l.keywords.digits,
                                        ),
                                    )
                                }
                                5 => {
                                    TokType::Int(
                                        DynInt::new(
                                            matcher[prefixes[3] + prefixes[2]..].to_vec(),
                                            8,
                                            &l.keywords.digits,
                                        ),
                                    )
                                }
                                _ => {
                                    ::core::panicking::panic(
                                        "internal error: entered unreachable code",
                                    )
                                }
                            }
                        }
                        6 => TokType::Float(0.),
                        7 => TokType::String(matcher),
                        _ => {
                            ::core::panicking::panic(
                                "internal error: entered unreachable code",
                            )
                        }
                    }
                }
                2 => Op::new(td),
                3 => TokType::Cmp(Cmp::new(td)),
                4 => {
                    match td {
                        0 => TokType::LParen,
                        1 => TokType::RParen,
                        2 => TokType::LParenCurly,
                        3 => TokType::RParenCurly,
                        4 => TokType::LParenSquare,
                        5 => TokType::RParenSquare,
                        _ => {
                            ::core::panicking::panic(
                                "internal error: entered unreachable code",
                            )
                        }
                    }
                }
                5 => {
                    match td {
                        255 => TokType::Set(None),
                        _ => TokType::Set(Some(Op::new_self(td))),
                    }
                }
                6 => TokType::Keyword(td),
                7 => {
                    TokType::Identifier(
                        l.name.0.to_string(),
                        String::from_utf8(matcher).unwrap(),
                    )
                }
                255 => {
                    TokType::Comment(
                        l.name.0.to_string(),
                        String::from_utf8(matcher).unwrap(),
                    )
                }
                _ => ::core::panicking::panic("internal error: entered unreachable code"),
            }
        }
    }
    impl Op {
        /// Make a new operator (either `TokType::Op(Self)` or other `TokType` operator) from a `td` value
        fn new(td: u8) -> TokType {
            match td {
                0..=5 => TokType::Op(Op::new_self(td)),
                6 => TokType::Increment,
                7 => TokType::Decrement,
                8 => TokType::Not,
                9 => TokType::Colon,
                10 => TokType::QuestionMark,
                11 => TokType::Dot,
                _ => ::core::panicking::panic("internal error: entered unreachable code"),
            }
        }
        /// Make a new `Op` instance
        ///
        /// | `td` | Variant |
        /// |---|---|
        /// | 0 | [`Op::Plus`] |
        /// | 1 | [`Op::Minus`] |
        /// | 2 | [`Op::Mod`] |
        /// | 3 | [`Op::Mult`] |
        /// | 4 | [`Op::Div`] |
        /// | 5 | [`Op::Pow`] |
        fn new_self(td: u8) -> Self {
            match td {
                0 => Op::Plus,
                1 => Op::Minus,
                2 => Op::Mod,
                3 => Op::Mult,
                4 => Op::Div,
                5 => Op::Pow,
                _ => ::core::panicking::panic("internal error: entered unreachable code"),
            }
        }
    }
    impl Cmp {
        /// Make a new instance from a `td` value
        fn new(td: u8) -> Self {
            match td {
                0 => Cmp::Eq,
                1 => Cmp::NE,
                2 => Cmp::LT,
                3 => Cmp::GT,
                4 => Cmp::LTE,
                5 => Cmp::GTE,
                _ => ::core::panicking::panic("internal error: entered unreachable code"),
            }
        }
    }
    impl Token {
        pub(crate) fn new(
            ps: Position,
            pe: Position,
            tt: u8,
            td: u8,
            matcher: Vec<u8>,
            l: &LanguageRaw<'_>,
        ) -> Self {
            Self {
                ps,
                pe,
                tt: TokType::new(tt, td, matcher, l),
            }
        }
    }
}
use lang_macros::languages;
pub mod prelude {
    //! Re-exported structs from [`lang-inner::prelude`](lang_inner::prelude)
    pub use lang_inner::prelude::*;
}
#[automatically_derived]
mod en {
    //!Autogenerated language module for English (en)
    use lang_inner::{prelude::*, compress::UStream};
    ///RawLanguage for English
    pub const LANG: LanguageRaw = LanguageRaw {
        name: ("English", "en"),
        left_right: true,
        keywords: Keywords {
            keywords: [
                "set",
                "and",
                "or",
                "not",
                "if",
                "else",
                "case",
                "default",
                "iterate",
                "import",
                "while",
                "def",
                "return",
                "continue",
                "break",
                "as",
            ],
            type_kwds: [
                "class",
                "properties",
                "enum",
                "variants",
                "self",
                "Self",
                "extension",
                "extend",
            ],
            builtins: ["int", "float", "bool", "str", "list", "map"],
            bool: ["true", "false"],
            symbols: ["\\\\", "\\*", "*\\", "\"", "\"", "'", "'", "\\", "@", "\\\\\\"],
            symbol_keys: [
                "line_comment",
                "block_comment_start",
                "block_comment_end",
                "string_start",
                "string_end",
                "char_start",
                "char_end",
                "escape",
                "attribute_prefix",
                "arrow",
                "doc_comment",
            ],
            shell_keys: ["wrapLength", "historyLength", "name"],
            manifest_keys: [
                "package",
                "name",
                "version",
                "edition",
                "description",
                "authors",
                "github",
                "email",
                "twitter",
                "repository",
                "homepage",
                "readme",
                "license",
                "features",
                "dependencies",
            ],
            digits: Digits::Long {
                digits: [
                    'b',
                    'x',
                    'o',
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                    '6',
                    '7',
                    '8',
                    '9',
                    'a',
                    'b',
                    'c',
                    'd',
                    'e',
                    'f',
                    'A',
                    'B',
                    'C',
                    'D',
                    'E',
                    'F',
                ],
                u8arrays: [
                    ([0u8, 0u8, 0u8, 98u8], 3u8),
                    ([0u8, 0u8, 0u8, 120u8], 3u8),
                    ([0u8, 0u8, 0u8, 111u8], 3u8),
                    ([0u8, 0u8, 0u8, 48u8], 3u8),
                    ([0u8, 0u8, 0u8, 49u8], 3u8),
                    ([0u8, 0u8, 0u8, 50u8], 3u8),
                    ([0u8, 0u8, 0u8, 51u8], 3u8),
                    ([0u8, 0u8, 0u8, 52u8], 3u8),
                    ([0u8, 0u8, 0u8, 53u8], 3u8),
                    ([0u8, 0u8, 0u8, 54u8], 3u8),
                    ([0u8, 0u8, 0u8, 55u8], 3u8),
                    ([0u8, 0u8, 0u8, 56u8], 3u8),
                    ([0u8, 0u8, 0u8, 57u8], 3u8),
                    ([0u8, 0u8, 0u8, 97u8], 3u8),
                    ([0u8, 0u8, 0u8, 98u8], 3u8),
                    ([0u8, 0u8, 0u8, 99u8], 3u8),
                    ([0u8, 0u8, 0u8, 100u8], 3u8),
                    ([0u8, 0u8, 0u8, 101u8], 3u8),
                    ([0u8, 0u8, 0u8, 102u8], 3u8),
                    ([0u8, 0u8, 0u8, 65u8], 3u8),
                    ([0u8, 0u8, 0u8, 66u8], 3u8),
                    ([0u8, 0u8, 0u8, 67u8], 3u8),
                    ([0u8, 0u8, 0u8, 68u8], 3u8),
                    ([0u8, 0u8, 0u8, 69u8], 3u8),
                    ([0u8, 0u8, 0u8, 70u8], 3u8),
                ],
            },
            manifest_keys_short: [
                None,
                None,
                Some("v"),
                None,
                Some("desc"),
                Some("authors"),
                None,
                None,
                None,
                Some("repo"),
                None,
                None,
                None,
                None,
                Some("deps"),
            ],
            compile_words: [
                "Compiling",
                "Building",
                "Built",
                "Linking",
                "Emitted",
                "errors",
                "warnings",
            ],
        },
        messages: Messages {
            errors: Errors {
                e00: [
                    "e0001 placeholder",
                    "e0002 placeholder",
                    "e0003 placeholder",
                    "e0004 placeholder",
                    "e0005 placeholder",
                    "e0006 placeholder",
                    "e0007 placeholder",
                ],
                e01: ["e0101 placeholder", "e0102 placeholder"],
                e02: [
                    "e0201 placeholder",
                    "e0202 placeholder",
                    "e0203 placeholder",
                    "e0204 placeholder",
                    "e0205 placeholder",
                    "e0206 placeholder",
                    "e0207 placeholder",
                    "e0208 placeholder",
                    "e0209 placeholder",
                ],
                e03: ["e0301 placeholder"],
                e04: ["e0401 placeholder", "e0402 placeholder"],
            },
            warnings: Warns {
                w00: [],
                w01: [],
                w02: [],
                w03: [],
                w04: [],
            },
            cli_keywords: CLIKeywords {
                desc: "fck command line interface",
                commands: [
                    ("new", "Generate a new project"),
                    ("shell", "Run the shell"),
                    ("build", "Build the specified project or file"),
                    ("run", "Run the specified project after (optionally) building"),
                    ("test", "Test the given project using all or some tests"),
                    ("info", "Get info about the current fck version"),
                    ("lint", "Lint a project depending on the style file"),
                    ("raw", "Run a raw piece of fck code"),
                    ("doc", "Generate the documentation for a project"),
                    ("translate", "Translate a file or project into a target language"),
                ],
                args: [
                    ("help", 'h', "Show help information"),
                    ("path", 'p', "Path to file or directory"),
                    ("git", 'g', "Initialise the new project as a git repository"),
                    ("dump-llvm", 'd', "Dump the LLVM IR to a file"),
                    ("no-build", 'n', "Don't build before running the command"),
                    (
                        "test",
                        't',
                        "Path like string to a specific file module or test function to run. Can be given more than once",
                    ),
                    ("raw", 'r', "Raw string to run"),
                    ("target", 'l', "Language to translate the code into"),
                    ("output", 'o', "Path to output the translated file to"),
                    (
                        "comment",
                        'c',
                        "Include the comments in translation using LibreTranslate",
                    ),
                ],
            },
        },
    };
    /**Lexer map for English

Original densities:
- Transition: 208/30720=00.67708% (61440)
- TT: 151/30720=00.49154% (61440)
- TD: 146/30720=00.47526% (61440)
- transition 2604
- tt 2049
- td 2049*/
    pub const MAP: (
        UStream<u16, [u16; 411usize], [u16; 411usize], [usize; 120usize]>,
        UStream<u8, [u8; 363usize], [u16; 363usize], [usize; 120usize]>,
        UStream<u8, [u8; 363usize], [u16; 363usize], [usize; 120usize]>,
    ) = (
        UStream {
            stream: [
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                7u16,
                0u16,
                0u16,
                0u16,
                6u16,
                0u16,
                0u16,
                0u16,
                0u16,
                3u16,
                1u16,
                4u16,
                2u16,
                0u16,
                5u16,
                12u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                16u16,
                16u16,
                9u16,
                8u16,
                10u16,
                0u16,
                14u16,
                14u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                16u16,
                16u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                91u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                0u16,
                0u16,
                0u16,
                23u16,
                65u16,
                32u16,
                35u16,
                29u16,
                102u16,
                36u16,
                37u16,
                28u16,
                38u16,
                42u16,
                109u16,
                112u16,
                26u16,
                25u16,
                72u16,
                22u16,
                54u16,
                21u16,
                114u16,
                15u16,
                83u16,
                50u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                108u16,
                90u16,
                19u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                17u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                24u16,
                27u16,
                31u16,
                34u16,
                39u16,
                40u16,
                43u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                44u16,
                30u16,
                45u16,
                81u16,
                47u16,
                48u16,
                49u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                94u16,
                33u16,
                51u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                46u16,
                101u16,
                52u16,
                69u16,
                53u16,
                55u16,
                59u16,
                41u16,
                56u16,
                57u16,
                58u16,
                60u16,
                61u16,
                62u16,
                63u16,
                64u16,
                67u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                106u16,
                68u16,
                70u16,
                66u16,
                71u16,
                73u16,
                74u16,
                75u16,
                76u16,
                77u16,
                78u16,
                79u16,
                80u16,
                82u16,
                84u16,
                85u16,
                86u16,
                87u16,
                88u16,
                89u16,
                92u16,
                93u16,
                95u16,
                96u16,
                97u16,
                98u16,
                99u16,
                100u16,
                117u16,
                104u16,
                105u16,
                107u16,
                110u16,
                111u16,
                113u16,
                115u16,
                116u16,
                118u16,
                119u16,
                103u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
            ],
            origin: [
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                3u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                15u16,
                15u16,
                0u16,
                0u16,
                0u16,
                0u16,
                13u16,
                12u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                16u16,
                16u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                35u16,
                36u16,
                0u16,
                37u16,
                41u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                21u16,
                0u16,
                0u16,
                0u16,
                12u16,
                0u16,
                0u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                21u16,
                22u16,
                12u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                12u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                23u16,
                26u16,
                30u16,
                33u16,
                38u16,
                39u16,
                42u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                43u16,
                29u16,
                44u16,
                29u16,
                46u16,
                47u16,
                48u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                29u16,
                32u16,
                50u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                28u16,
                28u16,
                51u16,
                32u16,
                52u16,
                54u16,
                32u16,
                28u16,
                55u16,
                56u16,
                57u16,
                59u16,
                60u16,
                61u16,
                62u16,
                63u16,
                66u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                65u16,
                67u16,
                69u16,
                65u16,
                70u16,
                72u16,
                73u16,
                74u16,
                75u16,
                76u16,
                77u16,
                78u16,
                79u16,
                81u16,
                83u16,
                84u16,
                85u16,
                86u16,
                87u16,
                88u16,
                91u16,
                92u16,
                94u16,
                95u16,
                96u16,
                97u16,
                98u16,
                99u16,
                102u16,
                103u16,
                104u16,
                106u16,
                109u16,
                110u16,
                112u16,
                114u16,
                115u16,
                117u16,
                118u16,
                102u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
            ],
            offsets: [
                0usize,
                0usize,
                0usize,
                2usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                19usize,
                18usize,
                36usize,
                10usize,
                28usize,
                92usize,
                115usize,
                72usize,
                83usize,
                12usize,
                21usize,
                40usize,
                0usize,
                0usize,
                40usize,
                0usize,
                86usize,
                66usize,
                37usize,
                0usize,
                90usize,
                38usize,
                0usize,
                2usize,
                2usize,
                9usize,
                37usize,
                47usize,
                0usize,
                6usize,
                42usize,
                76usize,
                59usize,
                0usize,
                65usize,
                67usize,
                65usize,
                0usize,
                84usize,
                92usize,
                91usize,
                0usize,
                99usize,
                87usize,
                87usize,
                91usize,
                0usize,
                96usize,
                91usize,
                103usize,
                99usize,
                93usize,
                0usize,
                107usize,
                110usize,
                122usize,
                0usize,
                123usize,
                107usize,
                0usize,
                109usize,
                113usize,
                113usize,
                125usize,
                113usize,
                112usize,
                124usize,
                129usize,
                0usize,
                114usize,
                0usize,
                135usize,
                119usize,
                129usize,
                138usize,
                126usize,
                121usize,
                0usize,
                0usize,
                137usize,
                131usize,
                0usize,
                124usize,
                140usize,
                132usize,
                128usize,
                139usize,
                134usize,
                0usize,
                0usize,
                149usize,
                136usize,
                151usize,
                0usize,
                138usize,
                0usize,
                0usize,
                145usize,
                136usize,
                0usize,
                155usize,
                0usize,
                139usize,
                137usize,
                0usize,
                147usize,
                141usize,
                0usize,
            ],
        },
        UStream {
            stream: [
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                2u8,
                0u8,
                0u8,
                0u8,
                2u8,
                0u8,
                0u8,
                4u8,
                4u8,
                2u8,
                2u8,
                0u8,
                2u8,
                2u8,
                2u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                2u8,
                2u8,
                3u8,
                5u8,
                3u8,
                2u8,
                2u8,
                2u8,
                5u8,
                5u8,
                5u8,
                3u8,
                3u8,
                3u8,
                3u8,
                1u8,
                1u8,
                1u8,
                0u8,
                5u8,
                1u8,
                1u8,
                5u8,
                0u8,
                0u8,
                0u8,
                5u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                4u8,
                1u8,
                4u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
            ],
            origin: [
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                1u16,
                0u16,
                0u16,
                0u16,
                0u16,
                2u16,
                3u16,
                4u16,
                5u16,
                6u16,
                7u16,
                8u16,
                9u16,
                10u16,
                12u16,
                15u16,
                15u16,
                0u16,
                1u16,
                16u16,
                16u16,
                2u16,
                0u16,
                0u16,
                0u16,
                3u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                13u16,
                0u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                22u16,
                23u16,
                24u16,
                25u16,
                27u16,
                28u16,
                31u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                34u16,
                36u16,
                40u16,
                45u16,
                49u16,
                53u16,
                58u16,
                64u16,
                68u16,
                71u16,
                80u16,
                82u16,
                89u16,
                90u16,
                93u16,
                97u16,
                100u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                101u16,
                105u16,
                107u16,
                108u16,
                111u16,
                113u16,
                116u16,
                119u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
            ],
            offsets: [
                0usize,
                16usize,
                19usize,
                23usize,
                5usize,
                6usize,
                7usize,
                8usize,
                9usize,
                10usize,
                11usize,
                0usize,
                27usize,
                46usize,
                56usize,
                26usize,
                30usize,
                66usize,
                89usize,
                99usize,
                107usize,
                0usize,
                8usize,
                10usize,
                26usize,
                13usize,
                0usize,
                12usize,
                27usize,
                0usize,
                0usize,
                29usize,
                0usize,
                0usize,
                68usize,
                0usize,
                68usize,
                0usize,
                0usize,
                0usize,
                55usize,
                0usize,
                0usize,
                0usize,
                0usize,
                71usize,
                0usize,
                0usize,
                0usize,
                57usize,
                0usize,
                0usize,
                0usize,
                73usize,
                0usize,
                0usize,
                0usize,
                0usize,
                65usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                75usize,
                0usize,
                0usize,
                0usize,
                70usize,
                0usize,
                0usize,
                63usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                64usize,
                0usize,
                71usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                66usize,
                80usize,
                0usize,
                0usize,
                81usize,
                0usize,
                0usize,
                0usize,
                84usize,
                0usize,
                0usize,
                75usize,
                76usize,
                0usize,
                0usize,
                0usize,
                77usize,
                0usize,
                86usize,
                81usize,
                0usize,
                0usize,
                80usize,
                0usize,
                85usize,
                0usize,
                0usize,
                97usize,
                0usize,
                0usize,
                98usize,
            ],
        },
        UStream {
            stream: [
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                8u8,
                0u8,
                0u8,
                0u8,
                2u8,
                0u8,
                0u8,
                0u8,
                1u8,
                3u8,
                6u8,
                0u8,
                1u8,
                11u8,
                4u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                9u8,
                7u8,
                2u8,
                255u8,
                3u8,
                10u8,
                5u8,
                5u8,
                4u8,
                2u8,
                1u8,
                4u8,
                5u8,
                6u8,
                3u8,
                3u8,
                0u8,
                1u8,
                3u8,
                3u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                3u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                4u8,
                6u8,
                5u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                6u8,
                6u8,
                6u8,
                6u8,
                6u8,
                6u8,
                6u8,
                6u8,
                6u8,
                6u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                15u8,
                1u8,
                2u8,
                3u8,
                4u8,
                5u8,
                6u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                11u8,
                7u8,
                8u8,
                9u8,
                10u8,
                12u8,
                13u8,
                14u8,
                64u8,
                65u8,
                66u8,
                67u8,
                68u8,
                69u8,
                71u8,
                70u8,
                128u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                129u8,
                130u8,
                131u8,
                132u8,
                133u8,
                192u8,
                193u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
            ],
            origin: [
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                1u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                2u16,
                0u16,
                0u16,
                0u16,
                0u16,
                3u16,
                4u16,
                5u16,
                6u16,
                7u16,
                9u16,
                10u16,
                12u16,
                15u16,
                15u16,
                0u16,
                2u16,
                16u16,
                16u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                3u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                13u16,
                0u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                23u16,
                24u16,
                25u16,
                27u16,
                28u16,
                31u16,
                34u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                36u16,
                40u16,
                45u16,
                49u16,
                53u16,
                58u16,
                64u16,
                68u16,
                71u16,
                80u16,
                82u16,
                89u16,
                90u16,
                93u16,
                97u16,
                100u16,
                101u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                105u16,
                107u16,
                108u16,
                111u16,
                113u16,
                116u16,
                119u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
            ],
            offsets: [
                0usize,
                0usize,
                14usize,
                22usize,
                4usize,
                5usize,
                6usize,
                7usize,
                0usize,
                8usize,
                9usize,
                0usize,
                25usize,
                46usize,
                56usize,
                24usize,
                28usize,
                66usize,
                89usize,
                99usize,
                107usize,
                0usize,
                0usize,
                9usize,
                25usize,
                12usize,
                0usize,
                11usize,
                26usize,
                0usize,
                0usize,
                28usize,
                0usize,
                0usize,
                29usize,
                0usize,
                67usize,
                0usize,
                0usize,
                0usize,
                54usize,
                0usize,
                0usize,
                0usize,
                0usize,
                70usize,
                0usize,
                0usize,
                0usize,
                56usize,
                0usize,
                0usize,
                0usize,
                72usize,
                0usize,
                0usize,
                0usize,
                0usize,
                64usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                74usize,
                0usize,
                0usize,
                0usize,
                69usize,
                0usize,
                0usize,
                62usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                63usize,
                0usize,
                70usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                65usize,
                79usize,
                0usize,
                0usize,
                80usize,
                0usize,
                0usize,
                0usize,
                83usize,
                0usize,
                0usize,
                74usize,
                69usize,
                0usize,
                0usize,
                0usize,
                76usize,
                0usize,
                85usize,
                80usize,
                0usize,
                0usize,
                79usize,
                0usize,
                84usize,
                0usize,
                0usize,
                96usize,
                0usize,
                0usize,
                97usize,
            ],
        },
    );
}
#[automatically_derived]
mod ens {
    //!Autogenerated language module for English (ens)
    use lang_inner::{prelude::*, compress::UStream};
    ///RawLanguage for English
    pub const LANG: LanguageRaw = LanguageRaw {
        name: ("English", "ens"),
        left_right: true,
        keywords: Keywords {
            keywords: [
                "set",
                "and",
                "or",
                "not",
                "if",
                "else",
                "case",
                "default",
                "iterate",
                "import",
                "while",
                "def",
                "return",
                "continue",
                "break",
                "as",
            ],
            type_kwds: [
                "class",
                "properties",
                "enum",
                "variants",
                "self",
                "Self",
                "extension",
                "extend",
            ],
            builtins: ["int", "float", "bool", "str", "list", "map"],
            bool: ["true", "false"],
            symbols: ["\\\\", "\\*", "*\\", "\"", "\"", "'", "'", "\\", "@", "\\\\\\"],
            symbol_keys: [
                "line_comment",
                "block_comment_start",
                "block_comment_end",
                "string_start",
                "string_end",
                "char_start",
                "char_end",
                "escape",
                "attribute_prefix",
                "arrow",
                "doc_comment",
            ],
            shell_keys: ["wrapLength", "historyLength", "name"],
            manifest_keys: [
                "package",
                "name",
                "version",
                "edition",
                "description",
                "authors",
                "github",
                "email",
                "twitter",
                "repository",
                "homepage",
                "readme",
                "license",
                "features",
                "dependencies",
            ],
            digits: Digits::Short {
                digits: [
                    'b',
                    'x',
                    'o',
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                    '6',
                    '7',
                    '8',
                    '9',
                    'a',
                    'b',
                    'c',
                    'd',
                    'e',
                    'f',
                ],
                u8arrays: [
                    ([0u8, 0u8, 0u8, 98u8], 3u8),
                    ([0u8, 0u8, 0u8, 120u8], 3u8),
                    ([0u8, 0u8, 0u8, 111u8], 3u8),
                    ([0u8, 0u8, 0u8, 48u8], 3u8),
                    ([0u8, 0u8, 0u8, 49u8], 3u8),
                    ([0u8, 0u8, 0u8, 50u8], 3u8),
                    ([0u8, 0u8, 0u8, 51u8], 3u8),
                    ([0u8, 0u8, 0u8, 52u8], 3u8),
                    ([0u8, 0u8, 0u8, 53u8], 3u8),
                    ([0u8, 0u8, 0u8, 54u8], 3u8),
                    ([0u8, 0u8, 0u8, 55u8], 3u8),
                    ([0u8, 0u8, 0u8, 56u8], 3u8),
                    ([0u8, 0u8, 0u8, 57u8], 3u8),
                    ([0u8, 0u8, 0u8, 97u8], 3u8),
                    ([0u8, 0u8, 0u8, 98u8], 3u8),
                    ([0u8, 0u8, 0u8, 99u8], 3u8),
                    ([0u8, 0u8, 0u8, 100u8], 3u8),
                    ([0u8, 0u8, 0u8, 101u8], 3u8),
                    ([0u8, 0u8, 0u8, 102u8], 3u8),
                ],
            },
            manifest_keys_short: [
                None,
                None,
                Some("v"),
                None,
                Some("desc"),
                Some("authors"),
                None,
                None,
                None,
                Some("repo"),
                None,
                None,
                None,
                None,
                Some("deps"),
            ],
            compile_words: [
                "Compiling",
                "Building",
                "Built",
                "Linking",
                "Emitted",
                "errors",
                "warnings",
            ],
        },
        messages: Messages {
            errors: Errors {
                e00: [
                    "e0001 placeholder",
                    "e0002 placeholder",
                    "e0003 placeholder",
                    "e0004 placeholder",
                    "e0005 placeholder",
                    "e0006 placeholder",
                    "e0007 placeholder",
                ],
                e01: ["e0101 placeholder", "e0102 placeholder"],
                e02: [
                    "e0201 placeholder",
                    "e0202 placeholder",
                    "e0203 placeholder",
                    "e0204 placeholder",
                    "e0205 placeholder",
                    "e0206 placeholder",
                    "e0207 placeholder",
                    "e0208 placeholder",
                    "e0209 placeholder",
                ],
                e03: ["e0301 placeholder"],
                e04: ["e0401 placeholder", "e0402 placeholder"],
            },
            warnings: Warns {
                w00: [],
                w01: [],
                w02: [],
                w03: [],
                w04: [],
            },
            cli_keywords: CLIKeywords {
                desc: "fck command line interface",
                commands: [
                    ("new", "Generate a new project"),
                    ("shell", "Run the shell"),
                    ("build", "Build the specified project or file"),
                    ("run", "Run the specified project after (optionally) building"),
                    ("test", "Test the given project using all or some tests"),
                    ("info", "Get info about the current fck version"),
                    ("lint", "Lint a project depending on the style file"),
                    ("raw", "Run a raw piece of fck code"),
                    ("doc", "Generate the documentation for a project"),
                    ("translate", "Translate a file or project into a target language"),
                ],
                args: [
                    ("help", 'h', "Show help information"),
                    ("path", 'p', "Path to file or directory"),
                    ("git", 'g', "Initialise the new project as a git repository"),
                    ("dump-llvm", 'd', "Dump the LLVM IR to a file"),
                    ("no-build", 'n', "Don't build before running the command"),
                    (
                        "test",
                        't',
                        "Path like string to a specific file module or test function to run. Can be given more than once",
                    ),
                    ("raw", 'r', "Raw string to run"),
                    ("target", 'l', "Language to translate the code into"),
                    ("output", 'o', "Path to output the translated file to"),
                    (
                        "comment",
                        'c',
                        "Include the comments in translation using LibreTranslate",
                    ),
                ],
            },
        },
    };
    /**Lexer map for English

Original densities:
- Transition: 196/30720=00.63802% (61440)
- TT: 145/30720=00.47201% (61440)
- TD: 140/30720=00.45573% (61440)
- transition 2157u8 2556u16
- tt 2010u8 2360u16
- td 2010u8 2360u16*/
    pub const MAP: (
        UStream<u16, [u16; 399usize], [u16; 399usize], [usize; 120usize]>,
        UStream<u8, [u8; 350usize], [u16; 350usize], [usize; 120usize]>,
        UStream<u8, [u8; 350usize], [u16; 350usize], [usize; 120usize]>,
    ) = (
        UStream {
            stream: [
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                7u16,
                0u16,
                0u16,
                0u16,
                6u16,
                0u16,
                0u16,
                0u16,
                0u16,
                3u16,
                1u16,
                4u16,
                2u16,
                0u16,
                5u16,
                12u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                16u16,
                16u16,
                9u16,
                8u16,
                10u16,
                0u16,
                14u16,
                14u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                16u16,
                16u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                91u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                0u16,
                0u16,
                0u16,
                23u16,
                65u16,
                32u16,
                35u16,
                29u16,
                102u16,
                36u16,
                37u16,
                28u16,
                38u16,
                42u16,
                109u16,
                112u16,
                26u16,
                25u16,
                72u16,
                90u16,
                54u16,
                21u16,
                114u16,
                15u16,
                83u16,
                50u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                19u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                17u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                24u16,
                27u16,
                22u16,
                46u16,
                101u16,
                31u16,
                30u16,
                34u16,
                81u16,
                33u16,
                41u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                108u16,
                94u16,
                39u16,
                69u16,
                40u16,
                43u16,
                59u16,
                44u16,
                45u16,
                47u16,
                48u16,
                49u16,
                51u16,
                52u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                53u16,
                55u16,
                56u16,
                57u16,
                58u16,
                60u16,
                61u16,
                62u16,
                63u16,
                64u16,
                106u16,
                67u16,
                68u16,
                66u16,
                70u16,
                71u16,
                73u16,
                74u16,
                75u16,
                76u16,
                77u16,
                78u16,
                79u16,
                80u16,
                82u16,
                84u16,
                85u16,
                86u16,
                87u16,
                88u16,
                89u16,
                92u16,
                93u16,
                95u16,
                96u16,
                97u16,
                98u16,
                99u16,
                100u16,
                117u16,
                104u16,
                105u16,
                107u16,
                110u16,
                111u16,
                113u16,
                115u16,
                116u16,
                118u16,
                119u16,
                103u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
            ],
            origin: [
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                3u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                15u16,
                15u16,
                0u16,
                0u16,
                0u16,
                0u16,
                13u16,
                12u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                16u16,
                16u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                35u16,
                36u16,
                0u16,
                37u16,
                41u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                22u16,
                0u16,
                0u16,
                0u16,
                12u16,
                0u16,
                0u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                12u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                12u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                23u16,
                26u16,
                21u16,
                28u16,
                28u16,
                30u16,
                29u16,
                33u16,
                29u16,
                32u16,
                28u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                21u16,
                29u16,
                38u16,
                32u16,
                39u16,
                42u16,
                32u16,
                43u16,
                44u16,
                46u16,
                47u16,
                48u16,
                50u16,
                51u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                52u16,
                54u16,
                55u16,
                56u16,
                57u16,
                59u16,
                60u16,
                61u16,
                62u16,
                63u16,
                65u16,
                66u16,
                67u16,
                65u16,
                69u16,
                70u16,
                72u16,
                73u16,
                74u16,
                75u16,
                76u16,
                77u16,
                78u16,
                79u16,
                81u16,
                83u16,
                84u16,
                85u16,
                86u16,
                87u16,
                88u16,
                91u16,
                92u16,
                94u16,
                95u16,
                96u16,
                97u16,
                98u16,
                99u16,
                102u16,
                103u16,
                104u16,
                106u16,
                109u16,
                110u16,
                112u16,
                114u16,
                115u16,
                117u16,
                118u16,
                102u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
            ],
            offsets: [
                0usize,
                0usize,
                0usize,
                2usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                19usize,
                18usize,
                36usize,
                10usize,
                28usize,
                72usize,
                92usize,
                83usize,
                102usize,
                59usize,
                5usize,
                48usize,
                0usize,
                0usize,
                48usize,
                0usize,
                52usize,
                56usize,
                48usize,
                0usize,
                70usize,
                50usize,
                0usize,
                2usize,
                2usize,
                9usize,
                60usize,
                71usize,
                0usize,
                6usize,
                66usize,
                85usize,
                67usize,
                0usize,
                72usize,
                74usize,
                72usize,
                0usize,
                83usize,
                83usize,
                87usize,
                0usize,
                95usize,
                81usize,
                81usize,
                85usize,
                0usize,
                90usize,
                85usize,
                97usize,
                93usize,
                87usize,
                0usize,
                94usize,
                105usize,
                110usize,
                0usize,
                112usize,
                95usize,
                0usize,
                97usize,
                101usize,
                101usize,
                113usize,
                101usize,
                100usize,
                112usize,
                117usize,
                0usize,
                102usize,
                0usize,
                123usize,
                107usize,
                117usize,
                126usize,
                114usize,
                109usize,
                0usize,
                0usize,
                125usize,
                119usize,
                0usize,
                112usize,
                128usize,
                120usize,
                116usize,
                127usize,
                122usize,
                0usize,
                0usize,
                137usize,
                124usize,
                139usize,
                0usize,
                126usize,
                0usize,
                0usize,
                133usize,
                124usize,
                0usize,
                143usize,
                0usize,
                127usize,
                125usize,
                0usize,
                135usize,
                129usize,
                0usize,
            ],
        },
        UStream {
            stream: [
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                2u8,
                0u8,
                0u8,
                0u8,
                2u8,
                0u8,
                0u8,
                4u8,
                4u8,
                2u8,
                2u8,
                0u8,
                2u8,
                2u8,
                2u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                2u8,
                2u8,
                3u8,
                5u8,
                3u8,
                2u8,
                2u8,
                2u8,
                5u8,
                5u8,
                5u8,
                3u8,
                3u8,
                3u8,
                3u8,
                1u8,
                1u8,
                1u8,
                0u8,
                5u8,
                1u8,
                1u8,
                5u8,
                0u8,
                0u8,
                0u8,
                5u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                4u8,
                1u8,
                4u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                8u8,
                8u8,
                8u8,
                8u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
            ],
            origin: [
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                1u16,
                0u16,
                0u16,
                0u16,
                0u16,
                2u16,
                3u16,
                4u16,
                5u16,
                6u16,
                7u16,
                8u16,
                9u16,
                10u16,
                12u16,
                15u16,
                15u16,
                0u16,
                1u16,
                16u16,
                16u16,
                2u16,
                0u16,
                0u16,
                0u16,
                3u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                13u16,
                0u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                22u16,
                23u16,
                24u16,
                25u16,
                27u16,
                28u16,
                31u16,
                34u16,
                36u16,
                40u16,
                45u16,
                49u16,
                53u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                58u16,
                64u16,
                68u16,
                71u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                80u16,
                82u16,
                89u16,
                90u16,
                93u16,
                97u16,
                100u16,
                101u16,
                105u16,
                107u16,
                108u16,
                111u16,
                113u16,
                116u16,
                119u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
            ],
            offsets: [
                0usize,
                16usize,
                19usize,
                23usize,
                5usize,
                6usize,
                7usize,
                8usize,
                9usize,
                10usize,
                11usize,
                0usize,
                27usize,
                46usize,
                56usize,
                26usize,
                30usize,
                66usize,
                76usize,
                86usize,
                94usize,
                0usize,
                34usize,
                36usize,
                52usize,
                39usize,
                0usize,
                38usize,
                53usize,
                0usize,
                0usize,
                55usize,
                0usize,
                0usize,
                56usize,
                0usize,
                56usize,
                0usize,
                0usize,
                0usize,
                43usize,
                0usize,
                0usize,
                0usize,
                0usize,
                59usize,
                0usize,
                0usize,
                0usize,
                45usize,
                0usize,
                0usize,
                0usize,
                61usize,
                0usize,
                0usize,
                0usize,
                0usize,
                59usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                69usize,
                0usize,
                0usize,
                0usize,
                64usize,
                0usize,
                0usize,
                57usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                64usize,
                0usize,
                71usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                66usize,
                80usize,
                0usize,
                0usize,
                81usize,
                0usize,
                0usize,
                0usize,
                84usize,
                0usize,
                0usize,
                75usize,
                70usize,
                0usize,
                0usize,
                0usize,
                71usize,
                0usize,
                80usize,
                75usize,
                0usize,
                0usize,
                74usize,
                0usize,
                79usize,
                0usize,
                0usize,
                91usize,
                0usize,
                0usize,
                92usize,
            ],
        },
        UStream {
            stream: [
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                8u8,
                0u8,
                0u8,
                0u8,
                2u8,
                0u8,
                0u8,
                0u8,
                1u8,
                3u8,
                6u8,
                0u8,
                1u8,
                11u8,
                4u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                9u8,
                7u8,
                2u8,
                255u8,
                3u8,
                10u8,
                5u8,
                5u8,
                4u8,
                2u8,
                1u8,
                4u8,
                5u8,
                6u8,
                3u8,
                3u8,
                0u8,
                1u8,
                3u8,
                3u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                3u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                4u8,
                6u8,
                5u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                6u8,
                6u8,
                6u8,
                6u8,
                6u8,
                6u8,
                6u8,
                6u8,
                6u8,
                6u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                15u8,
                1u8,
                2u8,
                3u8,
                4u8,
                5u8,
                6u8,
                11u8,
                7u8,
                8u8,
                9u8,
                10u8,
                12u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                13u8,
                14u8,
                64u8,
                65u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                66u8,
                67u8,
                68u8,
                69u8,
                71u8,
                70u8,
                128u8,
                129u8,
                130u8,
                131u8,
                132u8,
                133u8,
                192u8,
                193u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
            ],
            origin: [
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                1u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                2u16,
                0u16,
                0u16,
                0u16,
                0u16,
                3u16,
                4u16,
                5u16,
                6u16,
                7u16,
                9u16,
                10u16,
                12u16,
                15u16,
                15u16,
                0u16,
                2u16,
                16u16,
                16u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                3u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                13u16,
                0u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                23u16,
                24u16,
                25u16,
                27u16,
                28u16,
                31u16,
                34u16,
                36u16,
                40u16,
                45u16,
                49u16,
                53u16,
                58u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                64u16,
                68u16,
                71u16,
                80u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                82u16,
                89u16,
                90u16,
                93u16,
                97u16,
                100u16,
                101u16,
                105u16,
                107u16,
                108u16,
                111u16,
                113u16,
                116u16,
                119u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
            ],
            offsets: [
                0usize,
                0usize,
                14usize,
                22usize,
                4usize,
                5usize,
                6usize,
                7usize,
                0usize,
                8usize,
                9usize,
                0usize,
                25usize,
                46usize,
                56usize,
                24usize,
                28usize,
                66usize,
                76usize,
                86usize,
                94usize,
                0usize,
                0usize,
                35usize,
                51usize,
                38usize,
                0usize,
                37usize,
                52usize,
                0usize,
                0usize,
                54usize,
                0usize,
                0usize,
                55usize,
                0usize,
                55usize,
                0usize,
                0usize,
                0usize,
                42usize,
                0usize,
                0usize,
                0usize,
                0usize,
                58usize,
                0usize,
                0usize,
                0usize,
                44usize,
                0usize,
                0usize,
                0usize,
                60usize,
                0usize,
                0usize,
                0usize,
                0usize,
                52usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                68usize,
                0usize,
                0usize,
                0usize,
                63usize,
                0usize,
                0usize,
                56usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                57usize,
                0usize,
                70usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                65usize,
                79usize,
                0usize,
                0usize,
                80usize,
                0usize,
                0usize,
                0usize,
                83usize,
                0usize,
                0usize,
                74usize,
                69usize,
                0usize,
                0usize,
                0usize,
                70usize,
                0usize,
                79usize,
                74usize,
                0usize,
                0usize,
                73usize,
                0usize,
                78usize,
                0usize,
                0usize,
                90usize,
                0usize,
                0usize,
                91usize,
            ],
        },
    );
}
#[automatically_derived]
mod de {
    //!Autogenerated language module for Deutsch (de)
    use lang_inner::{prelude::*, compress::UStream};
    ///RawLanguage for Deutsch
    pub const LANG: LanguageRaw = LanguageRaw {
        name: ("Deutsch", "de"),
        left_right: true,
        keywords: Keywords {
            keywords: [
                "setz",
                "und",
                "oder",
                "nicht",
                "wenn",
                "sonst",
                "bei-change",
                "default",
                "wieder",
                "importieren",
                "während",
                "def",
                "rück",
                "continue",
                "break",
                "as",
            ],
            type_kwds: [
                "class",
                "properties",
                "enum",
                "variants",
                "self",
                "Self",
                "extension",
                "extend",
            ],
            builtins: ["int", "float", "bool", "str", "list", "map"],
            bool: ["true", "false"],
            symbols: ["\\\\", "\\*", "*\\", "\"", "\"", "'", "'", "\\", "@", "\\\\\\"],
            symbol_keys: [
                "line_comment",
                "block_comment_start",
                "block_comment_end",
                "string_start",
                "string_end",
                "char_start",
                "char_end",
                "escape",
                "attribute_prefix",
                "arrow",
                "doc_comment",
            ],
            shell_keys: ["wrapLength", "historyLength", "name"],
            manifest_keys: [
                "package",
                "name",
                "version",
                "edition",
                "description",
                "authors",
                "github",
                "email",
                "twitter",
                "repository",
                "homepage",
                "readme",
                "license",
                "features",
                "dependencies",
            ],
            digits: Digits::Long {
                digits: [
                    'b',
                    'x',
                    'o',
                    '0',
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                    '6',
                    '7',
                    '8',
                    '9',
                    'a',
                    'b',
                    'c',
                    'd',
                    'e',
                    'f',
                    'A',
                    'B',
                    'C',
                    'D',
                    'E',
                    'F',
                ],
                u8arrays: [
                    ([0u8, 0u8, 0u8, 98u8], 3u8),
                    ([0u8, 0u8, 0u8, 120u8], 3u8),
                    ([0u8, 0u8, 0u8, 111u8], 3u8),
                    ([0u8, 0u8, 0u8, 48u8], 3u8),
                    ([0u8, 0u8, 0u8, 49u8], 3u8),
                    ([0u8, 0u8, 0u8, 50u8], 3u8),
                    ([0u8, 0u8, 0u8, 51u8], 3u8),
                    ([0u8, 0u8, 0u8, 52u8], 3u8),
                    ([0u8, 0u8, 0u8, 53u8], 3u8),
                    ([0u8, 0u8, 0u8, 54u8], 3u8),
                    ([0u8, 0u8, 0u8, 55u8], 3u8),
                    ([0u8, 0u8, 0u8, 56u8], 3u8),
                    ([0u8, 0u8, 0u8, 57u8], 3u8),
                    ([0u8, 0u8, 0u8, 97u8], 3u8),
                    ([0u8, 0u8, 0u8, 98u8], 3u8),
                    ([0u8, 0u8, 0u8, 99u8], 3u8),
                    ([0u8, 0u8, 0u8, 100u8], 3u8),
                    ([0u8, 0u8, 0u8, 101u8], 3u8),
                    ([0u8, 0u8, 0u8, 102u8], 3u8),
                    ([0u8, 0u8, 0u8, 65u8], 3u8),
                    ([0u8, 0u8, 0u8, 66u8], 3u8),
                    ([0u8, 0u8, 0u8, 67u8], 3u8),
                    ([0u8, 0u8, 0u8, 68u8], 3u8),
                    ([0u8, 0u8, 0u8, 69u8], 3u8),
                    ([0u8, 0u8, 0u8, 70u8], 3u8),
                ],
            },
            manifest_keys_short: [
                None,
                None,
                Some("v"),
                None,
                Some("desc"),
                Some("authors"),
                None,
                None,
                None,
                Some("repo"),
                None,
                None,
                None,
                None,
                Some("deps"),
            ],
            compile_words: [
                "Compiling",
                "Building",
                "Built",
                "Linking",
                "Emitted",
                "errors",
                "warnings",
            ],
        },
        messages: Messages {
            errors: Errors {
                e00: [
                    "e0001 placeholder",
                    "e0002 placeholder",
                    "e0003 placeholder",
                    "e0004 placeholder",
                    "e0005 placeholder",
                    "e0006 placeholder",
                    "e0007 placeholder",
                ],
                e01: ["e0101 placeholder", "e0102 placeholder"],
                e02: [
                    "e0201 placeholder",
                    "e0202 placeholder",
                    "e0203 placeholder",
                    "e0204 placeholder",
                    "e0205 placeholder",
                    "e0206 placeholder",
                    "e0207 placeholder",
                    "e0208 placeholder",
                    "e0209 placeholder",
                ],
                e03: ["e0301 placeholder"],
                e04: ["e0401 placeholder", "e0402 placeholder"],
            },
            warnings: Warns {
                w00: [],
                w01: [],
                w02: [],
                w03: [],
                w04: [],
            },
            cli_keywords: CLIKeywords {
                desc: "fck command line interface",
                commands: [
                    ("new", "Generate a new project"),
                    ("shell", "Run the shell"),
                    ("build", "Build the specified project or file"),
                    ("run", "Run the specified project after (optionally) building"),
                    ("test", "Test the given project using all or some tests"),
                    ("info", "Get info about the current fck version"),
                    ("lint", "Lint a project depending on the style file"),
                    ("raw", "Run a raw piece of fck code"),
                    ("doc", "Generate the documentation for a project"),
                    ("translate", "Translate a file or project into a target language"),
                ],
                args: [
                    ("help", 'h', "Show help information"),
                    ("path", 'p', "Path to file or directory"),
                    ("git", 'g', "Initialise the new project as a git repository"),
                    ("dump-llvm", 'd', "Dump the LLVM IR to a file"),
                    ("no-build", 'n', "Don't build before running the command"),
                    (
                        "test",
                        't',
                        "Path like string to a specific file module or test function to run. Can be given more than once",
                    ),
                    ("raw", 'r', "Raw string to run"),
                    ("target", 'l', "Language to translate the code into"),
                    ("output", 'o', "Path to output the translated file to"),
                    (
                        "comment",
                        'c',
                        "Include the comments in translation using LibreTranslate",
                    ),
                ],
            },
        },
    };
    /**Lexer map for Deutsch

Original densities:
- Transition: 229/36096=00.63442% (72192)
- TT: 151/36096=00.41833% (72192)
- TD: 146/36096=00.40448% (72192)
- transition 2421u8 2852u16
- tt 2217u8 2580u16
- td 2217u8 2580u16*/
    pub const MAP: (
        UStream<u16, [u16; 431usize], [u16; 431usize], [usize; 141usize]>,
        UStream<u8, [u8; 363usize], [u16; 363usize], [usize; 141usize]>,
        UStream<u8, [u8; 363usize], [u16; 363usize], [usize; 141usize]>,
    ) = (
        UStream {
            stream: [
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                7u16,
                0u16,
                0u16,
                0u16,
                6u16,
                0u16,
                0u16,
                0u16,
                0u16,
                3u16,
                1u16,
                4u16,
                2u16,
                42u16,
                5u16,
                12u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                16u16,
                16u16,
                9u16,
                8u16,
                10u16,
                16u16,
                16u16,
                0u16,
                0u16,
                14u16,
                14u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                0u16,
                0u16,
                0u16,
                0u16,
                112u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                0u16,
                0u16,
                0u16,
                88u16,
                39u16,
                78u16,
                48u16,
                101u16,
                123u16,
                27u16,
                28u16,
                58u16,
                30u16,
                31u16,
                130u16,
                133u16,
                29u16,
                26u16,
                92u16,
                25u16,
                74u16,
                21u16,
                135u16,
                24u16,
                104u16,
                33u16,
                15u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                32u16,
                35u16,
                37u16,
                38u16,
                19u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                17u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                34u16,
                41u16,
                43u16,
                44u16,
                54u16,
                45u16,
                46u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                47u16,
                49u16,
                50u16,
                51u16,
                52u16,
                53u16,
                111u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                22u16,
                23u16,
                55u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                40u16,
                36u16,
                56u16,
                57u16,
                59u16,
                122u16,
                129u16,
                60u16,
                61u16,
                62u16,
                127u16,
                63u16,
                64u16,
                85u16,
                65u16,
                66u16,
                67u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                69u16,
                70u16,
                71u16,
                72u16,
                73u16,
                75u16,
                76u16,
                77u16,
                89u16,
                80u16,
                81u16,
                79u16,
                82u16,
                83u16,
                84u16,
                86u16,
                87u16,
                90u16,
                91u16,
                93u16,
                94u16,
                95u16,
                96u16,
                97u16,
                98u16,
                99u16,
                68u16,
                100u16,
                102u16,
                103u16,
                105u16,
                106u16,
                107u16,
                108u16,
                109u16,
                110u16,
                113u16,
                114u16,
                115u16,
                116u16,
                117u16,
                118u16,
                119u16,
                120u16,
                121u16,
                138u16,
                125u16,
                126u16,
                128u16,
                131u16,
                132u16,
                134u16,
                136u16,
                137u16,
                139u16,
                140u16,
                124u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
            ],
            origin: [
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                3u16,
                0u16,
                41u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                15u16,
                15u16,
                0u16,
                0u16,
                0u16,
                16u16,
                16u16,
                0u16,
                0u16,
                13u16,
                12u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                26u16,
                27u16,
                0u16,
                29u16,
                30u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                24u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                12u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                31u16,
                34u16,
                36u16,
                37u16,
                12u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                12u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                33u16,
                40u16,
                42u16,
                43u16,
                33u16,
                44u16,
                45u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                46u16,
                48u16,
                49u16,
                50u16,
                51u16,
                52u16,
                22u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                21u16,
                22u16,
                54u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                39u16,
                21u16,
                55u16,
                56u16,
                58u16,
                58u16,
                21u16,
                59u16,
                60u16,
                61u16,
                39u16,
                62u16,
                63u16,
                39u16,
                64u16,
                65u16,
                66u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                68u16,
                69u16,
                70u16,
                71u16,
                72u16,
                74u16,
                75u16,
                76u16,
                78u16,
                79u16,
                80u16,
                78u16,
                81u16,
                82u16,
                83u16,
                85u16,
                86u16,
                89u16,
                90u16,
                92u16,
                93u16,
                94u16,
                95u16,
                96u16,
                97u16,
                98u16,
                33u16,
                99u16,
                101u16,
                102u16,
                104u16,
                105u16,
                106u16,
                107u16,
                108u16,
                109u16,
                112u16,
                113u16,
                101u16,
                115u16,
                116u16,
                117u16,
                118u16,
                119u16,
                120u16,
                123u16,
                124u16,
                125u16,
                127u16,
                130u16,
                131u16,
                133u16,
                135u16,
                136u16,
                138u16,
                139u16,
                123u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
            ],
            offsets: [
                0usize,
                0usize,
                0usize,
                2usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                22usize,
                21usize,
                36usize,
                10usize,
                15usize,
                95usize,
                118usize,
                73usize,
                86usize,
                88usize,
                74usize,
                0usize,
                3usize,
                0usize,
                3usize,
                3usize,
                0usize,
                1usize,
                8usize,
                25usize,
                0usize,
                52usize,
                20usize,
                0usize,
                21usize,
                17usize,
                0usize,
                97usize,
                49usize,
                1usize,
                56usize,
                52usize,
                61usize,
                49usize,
                73usize,
                0usize,
                76usize,
                76usize,
                82usize,
                63usize,
                73usize,
                0usize,
                90usize,
                100usize,
                100usize,
                0usize,
                93usize,
                93usize,
                95usize,
                93usize,
                93usize,
                105usize,
                111usize,
                99usize,
                113usize,
                0usize,
                57usize,
                118usize,
                109usize,
                123usize,
                115usize,
                0usize,
                31usize,
                39usize,
                129usize,
                0usize,
                121usize,
                120usize,
                115usize,
                128usize,
                124usize,
                118usize,
                0usize,
                135usize,
                140usize,
                0usize,
                0usize,
                141usize,
                124usize,
                0usize,
                126usize,
                130usize,
                130usize,
                142usize,
                130usize,
                129usize,
                141usize,
                147usize,
                0usize,
                139usize,
                133usize,
                0usize,
                154usize,
                138usize,
                148usize,
                157usize,
                145usize,
                140usize,
                0usize,
                0usize,
                156usize,
                150usize,
                0usize,
                144usize,
                160usize,
                152usize,
                148usize,
                159usize,
                154usize,
                0usize,
                0usize,
                169usize,
                156usize,
                171usize,
                0usize,
                158usize,
                0usize,
                0usize,
                165usize,
                156usize,
                0usize,
                175usize,
                0usize,
                159usize,
                157usize,
                0usize,
                167usize,
                161usize,
                0usize,
            ],
        },
        UStream {
            stream: [
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                2u8,
                0u8,
                0u8,
                0u8,
                2u8,
                0u8,
                0u8,
                4u8,
                4u8,
                2u8,
                2u8,
                0u8,
                2u8,
                2u8,
                2u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                2u8,
                2u8,
                3u8,
                5u8,
                3u8,
                2u8,
                2u8,
                2u8,
                5u8,
                5u8,
                5u8,
                3u8,
                3u8,
                3u8,
                3u8,
                1u8,
                1u8,
                1u8,
                0u8,
                5u8,
                1u8,
                1u8,
                5u8,
                0u8,
                0u8,
                0u8,
                5u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                4u8,
                1u8,
                4u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                1u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                8u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
            ],
            origin: [
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                1u16,
                0u16,
                0u16,
                0u16,
                0u16,
                2u16,
                3u16,
                4u16,
                5u16,
                6u16,
                7u16,
                8u16,
                9u16,
                10u16,
                12u16,
                15u16,
                15u16,
                0u16,
                1u16,
                16u16,
                16u16,
                2u16,
                0u16,
                0u16,
                0u16,
                3u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                13u16,
                0u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                23u16,
                25u16,
                28u16,
                32u16,
                35u16,
                38u16,
                47u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                49u16,
                53u16,
                57u16,
                67u16,
                73u16,
                77u16,
                84u16,
                87u16,
                88u16,
                91u16,
                100u16,
                103u16,
                110u16,
                111u16,
                114u16,
                118u16,
                121u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                122u16,
                126u16,
                128u16,
                129u16,
                132u16,
                134u16,
                137u16,
                140u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
            ],
            offsets: [
                0usize,
                16usize,
                19usize,
                23usize,
                5usize,
                6usize,
                7usize,
                8usize,
                9usize,
                10usize,
                11usize,
                0usize,
                27usize,
                46usize,
                56usize,
                26usize,
                30usize,
                66usize,
                89usize,
                99usize,
                107usize,
                0usize,
                0usize,
                2usize,
                0usize,
                25usize,
                0usize,
                0usize,
                12usize,
                0usize,
                0usize,
                0usize,
                11usize,
                0usize,
                0usize,
                18usize,
                0usize,
                0usize,
                13usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                29usize,
                0usize,
                67usize,
                0usize,
                0usize,
                0usize,
                54usize,
                0usize,
                0usize,
                0usize,
                57usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                62usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                73usize,
                0usize,
                0usize,
                0usize,
                67usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                74usize,
                0usize,
                0usize,
                69usize,
                62usize,
                0usize,
                0usize,
                63usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                64usize,
                0usize,
                0usize,
                71usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                66usize,
                80usize,
                0usize,
                0usize,
                81usize,
                0usize,
                0usize,
                0usize,
                84usize,
                0usize,
                0usize,
                75usize,
                76usize,
                0usize,
                0usize,
                0usize,
                77usize,
                0usize,
                86usize,
                81usize,
                0usize,
                0usize,
                80usize,
                0usize,
                85usize,
                0usize,
                0usize,
                97usize,
                0usize,
                0usize,
                98usize,
            ],
        },
        UStream {
            stream: [
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                8u8,
                0u8,
                0u8,
                0u8,
                2u8,
                0u8,
                0u8,
                0u8,
                1u8,
                3u8,
                6u8,
                0u8,
                1u8,
                11u8,
                4u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                9u8,
                7u8,
                2u8,
                255u8,
                3u8,
                10u8,
                5u8,
                5u8,
                4u8,
                2u8,
                1u8,
                4u8,
                5u8,
                6u8,
                3u8,
                3u8,
                0u8,
                1u8,
                3u8,
                3u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                3u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                4u8,
                6u8,
                5u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                2u8,
                6u8,
                6u8,
                6u8,
                6u8,
                6u8,
                6u8,
                6u8,
                6u8,
                6u8,
                6u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                1u8,
                2u8,
                3u8,
                4u8,
                5u8,
                6u8,
                11u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                5u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                7u8,
                8u8,
                9u8,
                10u8,
                12u8,
                13u8,
                14u8,
                15u8,
                64u8,
                65u8,
                66u8,
                67u8,
                68u8,
                69u8,
                71u8,
                70u8,
                128u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                4u8,
                129u8,
                130u8,
                131u8,
                132u8,
                133u8,
                192u8,
                193u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
                0u8,
            ],
            origin: [
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                1u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                2u16,
                0u16,
                0u16,
                0u16,
                0u16,
                3u16,
                4u16,
                5u16,
                6u16,
                7u16,
                9u16,
                10u16,
                12u16,
                15u16,
                15u16,
                0u16,
                2u16,
                16u16,
                16u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                3u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                13u16,
                0u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                13u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                14u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                25u16,
                28u16,
                32u16,
                35u16,
                38u16,
                47u16,
                49u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                19u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                20u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                17u16,
                53u16,
                57u16,
                67u16,
                73u16,
                77u16,
                84u16,
                87u16,
                88u16,
                91u16,
                100u16,
                103u16,
                110u16,
                111u16,
                114u16,
                118u16,
                121u16,
                122u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                18u16,
                126u16,
                128u16,
                129u16,
                132u16,
                134u16,
                137u16,
                140u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
                0u16,
            ],
            offsets: [
                0usize,
                0usize,
                14usize,
                22usize,
                4usize,
                5usize,
                6usize,
                7usize,
                0usize,
                8usize,
                9usize,
                0usize,
                25usize,
                46usize,
                56usize,
                24usize,
                28usize,
                66usize,
                89usize,
                99usize,
                107usize,
                0usize,
                0usize,
                0usize,
                0usize,
                24usize,
                0usize,
                0usize,
                11usize,
                0usize,
                0usize,
                0usize,
                10usize,
                0usize,
                0usize,
                17usize,
                0usize,
                0usize,
                12usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                28usize,
                0usize,
                28usize,
                0usize,
                0usize,
                0usize,
                53usize,
                0usize,
                0usize,
                0usize,
                56usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                61usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                72usize,
                0usize,
                0usize,
                0usize,
                66usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                73usize,
                0usize,
                0usize,
                68usize,
                61usize,
                0usize,
                0usize,
                62usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                63usize,
                0usize,
                0usize,
                70usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                0usize,
                65usize,
                79usize,
                0usize,
                0usize,
                80usize,
                0usize,
                0usize,
                0usize,
                83usize,
                0usize,
                0usize,
                74usize,
                69usize,
                0usize,
                0usize,
                0usize,
                76usize,
                0usize,
                85usize,
                80usize,
                0usize,
                0usize,
                79usize,
                0usize,
                84usize,
                0usize,
                0usize,
                96usize,
                0usize,
                0usize,
                97usize,
            ],
        },
    );
}
use lang_inner::verify::Verification;
use std::ops::Index;
/// Language storage tuple
///
/// This type is used to make code more readable. It's how custom languages are stored once read
pub type LanguageTuple<'a> = (
    LanguageRaw<'a>,
    (
        UStream<u16, Vec<u16>, Vec<u16>, Vec<usize>>,
        UStream<u8, Vec<u8>, Vec<u16>, Vec<usize>>,
        UStream<u8, Vec<u8>, Vec<u16>, Vec<usize>>,
    ),
);
trait SizedIndex<T>: Index<usize, Output = T> + Sized {}
/// Language reference tuple
///
/// This type is used to make code more readable. To reduce the memory requirements, all languages
/// and maps are passed as references. this is the type returned when getting a language
pub type LanguageTupleRef<'a> = (
    &'a LanguageRaw<'a>,
    (&'a dyn Table<u16>, &'a dyn Table<u8>, &'a dyn Table<u8>),
);
/// Get language and map from a language code
///
/// Try to get a built-in language from a language code. This will return a
/// [`LanguageRaw`](lang_inner::LanguageRaw) and a language transition map to be used with
/// [`tokenize`](crate::lexer::tokenize).
///
/// **Note that the language code is made lowercase so `EN` is equivalent to `en`.**
pub fn get<'a>(
    l: &str,
    buf: &'a Vec<LanguageTuple<'a>>,
) -> Option<LanguageTupleRef<'a>> {
    let l = &*l.to_lowercase();
    match l {
        "en" => return Some((&en::LANG, (&en::MAP.0, &en::MAP.1, &en::MAP.2))),
        "ens" => return Some((&ens::LANG, (&ens::MAP.0, &ens::MAP.1, &ens::MAP.2))),
        "de" => return Some((&de::LANG, (&de::MAP.0, &de::MAP.1, &de::MAP.2))),
        _ => {}
    }
    if let Some((v, (m1, m2, m3))) = buf.iter().find(|(t, _)| t.name.0 == l) {
        return Some((v, (m1, m2, m3)));
    }
    None
}
